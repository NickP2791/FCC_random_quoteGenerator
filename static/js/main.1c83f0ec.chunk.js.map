{"version":3,"sources":["colorpalette.js","App.js","reportWebVitals.js","index.js"],"names":["colorpalette","App","useState","quoteArr","setQuoteArr","quote","author","displayed","setDisplayed","color","setColor","useEffect","getQuotes","a","fetch","response","json","data","quotes","genColor","colorArrlength","length","randomNum","Math","floor","random","className","id","class","title","target","href","style","async","src","charset","backgroundColor","onClick","quoteArrlength","document","getElementsByTagName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"0OAAaA,EAAe,CAC5B,UACA,UACA,UACA,UACA,W,eCuEeC,MAxEf,WAEE,MAAgCC,mBAAS,MAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAkCF,mBAAS,CAACG,MAAO,aAAcC,OAAQ,aAAzE,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA0BN,mBAAS,WAAnC,mBAAOO,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAS,uCAAG,8BAAAC,EAAA,sEACOC,MAAM,0IADb,cACVC,EADU,gBAEGA,EAASC,OAFZ,OAEVC,EAFU,OAGhBb,EAAYa,EAAKC,QACjBV,EAAaS,EAAKC,OAAO,IAJT,2CAAH,qDAeTC,EAAW,WACf,IAAMC,EAAiBpB,EAAaqB,OAC9BC,EAAYC,KAAKC,MAAMD,KAAKE,SAASL,GAC3CV,GAAS,kBAAKV,EAAasB,OAK7B,OACE,qBAAKI,UAAU,wBAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKC,GAAG,YAAR,UACA,oBAAIA,GAAG,OAAP,SAAgBpB,EAAUF,QAC1B,qBAAIsB,GAAG,SAAP,eAAmBpB,EAAUD,UAC7B,sBAAKoB,UAAW,aAAhB,UACE,sBAAKC,GAAG,iBAAR,UACI,sBAAKD,UAAU,eAAf,UACE,mBAAGE,MAAM,SACXD,GAAG,cACHE,MAAM,oBACNC,OAAO,OACPC,KAAK,6BAJH,SAKF,mBAAGC,MAAO,CAACvB,MAAMA,GAAQmB,MAAM,kCAE/B,wBAAQK,OAAK,EAACC,IAAI,0CAA0CC,QAAQ,aAGtE,sBAAKT,UAAU,gBAAf,UACE,mBAAGE,MAAM,SACTD,GAAG,eACHE,MAAM,sBACNC,OAAO,OACPC,KAAK,6BAJL,SAKA,mBAAGC,MAAO,CAACvB,MAAMA,GAAQmB,MAAM,iCAE/B,wBAAQK,OAAK,EAACC,IAAI,0CAA0CC,QAAQ,gBAIxE,wBAAQH,MAAO,CAACI,gBAAgB3B,GAAQkB,GAAG,YAAYU,QA/C9C,WACf,IAAMC,EAAiBnC,EAASkB,OAC1BC,EAAYC,KAAKC,MAAMD,KAAKE,SAASa,GAC3C9B,GAAa,kBAAKL,EAASmB,MAC3BH,IACAoB,SAASC,qBAAqB,QAAQ,GAAGR,MAAMI,gBAAkB3B,GA0C3D,kCCxDKgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFb,SAASc,eAAe,SAM1BZ,M","file":"static/js/main.1c83f0ec.chunk.js","sourcesContent":["export const colorpalette = [\r\n'#cad2c5',\r\n'#84a98c',\r\n'#52796f',\r\n'#354f52',\r\n'#2f3e46'\r\n]","import React, {useState, useEffect} from 'react'\nimport {colorpalette} from './colorpalette'\nimport './App.css';\n\nfunction App() {\n  \n  const [quoteArr, setQuoteArr] = useState(null)\n  const [displayed, setDisplayed] = useState({quote: 'loading...', author: 'anonymus'})\n  const [color, setColor] = useState('#555b6e')\n   \n  useEffect(() => {\n    getQuotes()\n  }, [])\n\n  const getQuotes = async() => {\n    const response = await fetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json')\n    const data = await response.json()\n    setQuoteArr(data.quotes)\n    setDisplayed(data.quotes[0])\n    }\n  \n  const genQuote = () => {\n    const quoteArrlength = quoteArr.length\n    const randomNum = Math.floor(Math.random()*quoteArrlength)\n    setDisplayed(() =>quoteArr[randomNum])\n    genColor()\n    document.getElementsByTagName('body')[0].style.backgroundColor = color\n  };\n\n  const genColor = () => {\n    const colorArrlength = colorpalette.length\n    const randomNum = Math.floor(Math.random()*colorArrlength)\n    setColor(() =>colorpalette[randomNum])\n    \n    };\n\n\n  return (\n    <div className=\"App flexbox-container\">\n      <div className='container'>\n        <div id='quote-box'>\n        <h1 id='text' >{displayed.quote}</h1>\n        <h3 id='author'>- {displayed.author}</h3>\n        <div className ='bottom-row'>\n          <div id='social-buttons'>\n              <div className='tweet-button'> \n                <a class=\"button\"\n              id=\"tweet-quote\"\n              title=\"Tweet this quote!\"\n              target=\"_top\"\n              href='\"twitter.com/intent/tweet\"'>\n              <i style={{color:color}} class=\"fab fa-twitter-square fa-3x\"></i>\n              </a>\n              <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n            </div>\n\n            <div className='tumblr-button'>\n              <a class=\"button\"\n              id=\"tumblr-quote\"\n              title=\"Tumbler this quote!\"\n              target=\"_top\"\n              href='\"twitter.com/intent/tweet\"'>\n              <i style={{color:color}} class=\"fab fa-tumblr-square fa-3x\"></i>\n              </a>\n              <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n            </div>\n          </div>\n                    \n          <button style={{backgroundColor:color}} id=\"new-quote\" onClick={genQuote}>New Quote</button>\n        </div> \n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n  \n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}